// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  username String  @unique
  password String
  bio           String?
  walletAddress String?
  profilePicture String?
  role     Role
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  // Relations
  expertProfile ExpertProfile? // One-to-one relation
  bookings Booking[] @relation("UserBookings")
  expertise Booking[] @relation("ExpertBookings")
  reviewsGiven Review[] @relation("UserReviews")
  reviewsReceived Review[] @relation("ExpertReviews")
}

model ExpertProfile {
  id             String    @id @default(uuid())
  userId         String    @unique
  tags           String[]  
  availableWeekDays WeekDay[] // Enum array for weekdays
  startTimeSlot  String    // Example: "12:00 AM"
  endTimeSlot    String    // Example: "04:00 PM"
  hourlyRate     Float     
  rating         Float     @default(0.0)
  reviewCount    Int       @default(0)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}



model Booking {
  id             String        @id @default(uuid())
  userId         String
  expertId       String
  status         BookingStatus
  bookingDate    DateTime
  bookingDuration Float // Duration in minutes
  durationUnit   String  @default("minutes") // "minutes" or "hours"
  priceAtBooking Float   // Store expert's rate at the time of booking

  // Relations
  user   User    @relation(name: "UserBookings", fields: [userId], references: [id])
  expert User    @relation(name: "ExpertBookings", fields: [expertId], references: [id])
  payment Payment?

  @@index([userId])
  @@index([expertId])
}

model Payment {
  id        String @id @default(uuid())
  bookingId String @unique
  amount    Float
  currency  String @default("SOL") // Default to Solana
  fromWalletAddress String
  toWalletAddress String
  transactionId String @unique
  paymentStatus String @default("pending") // pending, completed, failed

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])

  @@index([transactionId])
}

model Review {
  id        String @id @default(uuid())
  userId    String
  expertId  String
  rating    Int  // Ensure validation at the app level (1-5)
  comment   String?

  // Relations
  user   User @relation(name: "UserReviews", fields: [userId], references: [id])
  expert User @relation(name: "ExpertReviews", fields: [expertId], references: [id])

  @@index([userId])
  @@index([expertId])
}

enum Role {
  user
  expert
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum WeekDay {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}
